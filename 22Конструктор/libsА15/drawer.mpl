
with(ListTools); Drawer := module () local coef; export drawFrequencies, drawDensity; option package;  drawFrequencies::static := proc (vectorsArray, path, sizePlot) local step, names, substr, marks, currentPath, coords, positionCount, k, j, i, lengthOfObject, colors, symbols, currentColorIndex, currentSymbolIndex, colorsCount, symbolsCount, colorCache, symbolCache, currentColor, currentSymbol, vectorLengths, elem; currentPath := 0; lengthOfObject := numelems(vectorsArray[1]["value"]:-eigs[1]); names := []; coords := [seq([Array([]), Array([])], l = 1 .. lengthOfObject)]; marks := []; vectorLengths := numelems(vectorsArray); for elem in vectorsArray do names := [op(names), elem["name"]]; substr := remove(type, StringTools:-Split(elem["name"], " - "), ""); marks := [op(marks), currentPath = substr[1]]; positionCount := numelems(elem["value"]:-eigs)-1; step := path*coef(elem["value"], path)/positionCount; for i from 0 to positionCount do for j to numelems(elem["value"]:-eigs[1]) do Append(coords[j][1], currentPath); Append(coords[j][2], elem["value"]:-eigs[i+1][j]) end do; if evalb(i <> positionCount) then currentPath := currentPath+step end if end do end do; marks := [op(marks), currentPath = substr[2]]; return multiple(plot, op(coords), title = typeset("      ", StringTools:-Join(names, ", ")), tickmarks = [marks, default], size = sizePlot, titlefont = [TIMES, 36], labelfont = [TIMES, 36], gridlines = true, axesfont = [TIMES, 26], labels = ["", "Frequency, THz"], labeldirections = [horizontal, vertical]) end proc; drawDensity::static := proc (phononSpectres, step) local densityVector, currentIndex, maxIndex, spectre, line, eig; currentIndex := 0; maxIndex := 0; densityVector := Vector(999999); for spectre in phononSpectres do for line in spectre:-eigs do for eig in line do currentIndex := floor(eig/step)+1; densityVector[currentIndex] := densityVector[currentIndex]+1; maxIndex := max(currentIndex, maxIndex) end do end do end do; densityVector := densityVector[1 .. maxIndex]; print(maxIndex); return Statistics:-ColumnGraph(densityVector, width = step, distance = 0) end proc; coef := proc (curVector, path) options operator, arrow; add(max(el), el in curVector:-waveVectors)/path end proc end module;

